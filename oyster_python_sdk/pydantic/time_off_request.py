# coding: utf-8

"""
    Endpoints

    Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from oyster_python_sdk.pydantic.time_off_engagement_details import TimeOffEngagementDetails

class TimeOffRequest(BaseModel):
    time_off_request_id: typing.Optional[str] = Field(None, alias='timeOffRequestId')

    engagement: typing.Optional[TimeOffEngagementDetails] = Field(None, alias='engagement')

    start_date: typing.Optional[date] = Field(None, alias='startDate')

    end_date: typing.Optional[date] = Field(None, alias='endDate')

    first_day_duration: typing.Optional[str] = Field(None, alias='firstDayDuration')

    last_day_duration: typing.Optional[typing.Optional[str]] = Field(None, alias='lastDayDuration')

    state: typing.Optional[str] = Field(None, alias='state')

    type: typing.Optional[str] = Field(None, alias='type')

    requester_comments: typing.Optional[typing.Optional[str]] = Field(None, alias='requesterComments')

    rejection_reason: typing.Optional[typing.Optional[str]] = Field(None, alias='rejectionReason')

    reason: typing.Optional[str] = Field(None, alias='reason')

    period_in_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='periodInHours')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
