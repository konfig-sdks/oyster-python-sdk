# coding: utf-8

"""
    Endpoints

    Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class AuthenticationCreateAccessTokenRequest(BaseModel):
    # The client_id of your Developer App. This can be found by visting https://app.oysterhr.com/developer
    client_id: typing.Optional[str] = Field(None, alias='client_id')

    # The secret of your Developer App.
    client_secret: typing.Optional[str] = Field(None, alias='client_secret')

    # First you need to request an `authorization_code`. Afterwards you can request a `refresh_token`.
    grant_type: typing.Optional[str] = Field(None, alias='grant_type')

    # The code is required when requesting an `authorization_code`.
    code: typing.Optional[str] = Field(None, alias='code')

    # The redirect_uri is required when requesting an `authorization_code`.
    redirect_uri: typing.Optional[str] = Field(None, alias='redirect_uri')

    # A `refresh_token` is required when requesting a `refresh_token`. A `refresh_token` will be provided when requesting an `authorization_code`
    refresh_token: typing.Optional[str] = Field(None, alias='refresh_token')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
