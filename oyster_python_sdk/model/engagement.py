# coding: utf-8

"""
    Endpoints

    Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oyster_python_sdk import schemas  # noqa: F401


class Engagement(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "role",
            "countryCode",
            "engagementType",
            "personalDetails",
            "engagementId",
            "startDate",
        }
        
        class properties:
            engagementId = schemas.StrSchema
            startDate = schemas.DateSchema
            
            
            class engagementType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "EMPLOYMENT": "EMPLOYMENT",
                        "CONTRACT": "CONTRACT",
                    }
                
                @schemas.classproperty
                def EMPLOYMENT(cls):
                    return cls("EMPLOYMENT")
                
                @schemas.classproperty
                def CONTRACT(cls):
                    return cls("CONTRACT")
            role = schemas.StrSchema
            countryCode = schemas.StrSchema
        
            @staticmethod
            def personalDetails() -> typing.Type['EngagementPersonalDetails']:
                return EngagementPersonalDetails
            modifiedAt = schemas.DateTimeSchema
            state = schemas.StrSchema
            
            
            class employment(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'employment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class contract(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contract':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def benefitEnrollments() -> typing.Type['EngagementBenefitEnrollments']:
                return EngagementBenefitEnrollments
        
            @staticmethod
            def terminations() -> typing.Type['EngagementTerminations']:
                return EngagementTerminations
        
            @staticmethod
            def department() -> typing.Type['EngagementDepartment']:
                return EngagementDepartment
            __annotations__ = {
                "engagementId": engagementId,
                "startDate": startDate,
                "engagementType": engagementType,
                "role": role,
                "countryCode": countryCode,
                "personalDetails": personalDetails,
                "modifiedAt": modifiedAt,
                "state": state,
                "employment": employment,
                "contract": contract,
                "benefitEnrollments": benefitEnrollments,
                "terminations": terminations,
                "department": department,
            }
    
    role: MetaOapg.properties.role
    countryCode: MetaOapg.properties.countryCode
    engagementType: MetaOapg.properties.engagementType
    personalDetails: 'EngagementPersonalDetails'
    engagementId: MetaOapg.properties.engagementId
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagementId"]) -> MetaOapg.properties.engagementId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagementType"]) -> MetaOapg.properties.engagementType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalDetails"]) -> 'EngagementPersonalDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedAt"]) -> MetaOapg.properties.modifiedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> MetaOapg.properties.employment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract"]) -> MetaOapg.properties.contract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitEnrollments"]) -> 'EngagementBenefitEnrollments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminations"]) -> 'EngagementTerminations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'EngagementDepartment': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["engagementId", "startDate", "engagementType", "role", "countryCode", "personalDetails", "modifiedAt", "state", "employment", "contract", "benefitEnrollments", "terminations", "department", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagementId"]) -> MetaOapg.properties.engagementId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagementType"]) -> MetaOapg.properties.engagementType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalDetails"]) -> 'EngagementPersonalDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedAt"]) -> typing.Union[MetaOapg.properties.modifiedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> typing.Union[MetaOapg.properties.employment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract"]) -> typing.Union[MetaOapg.properties.contract, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitEnrollments"]) -> typing.Union['EngagementBenefitEnrollments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminations"]) -> typing.Union['EngagementTerminations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['EngagementDepartment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["engagementId", "startDate", "engagementType", "role", "countryCode", "personalDetails", "modifiedAt", "state", "employment", "contract", "benefitEnrollments", "terminations", "department", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        role: typing.Union[MetaOapg.properties.role, str, ],
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, ],
        engagementType: typing.Union[MetaOapg.properties.engagementType, str, ],
        personalDetails: 'EngagementPersonalDetails',
        engagementId: typing.Union[MetaOapg.properties.engagementId, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
        modifiedAt: typing.Union[MetaOapg.properties.modifiedAt, str, datetime, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        employment: typing.Union[MetaOapg.properties.employment, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        contract: typing.Union[MetaOapg.properties.contract, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        benefitEnrollments: typing.Union['EngagementBenefitEnrollments', schemas.Unset] = schemas.unset,
        terminations: typing.Union['EngagementTerminations', schemas.Unset] = schemas.unset,
        department: typing.Union['EngagementDepartment', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Engagement':
        return super().__new__(
            cls,
            *args,
            role=role,
            countryCode=countryCode,
            engagementType=engagementType,
            personalDetails=personalDetails,
            engagementId=engagementId,
            startDate=startDate,
            modifiedAt=modifiedAt,
            state=state,
            employment=employment,
            contract=contract,
            benefitEnrollments=benefitEnrollments,
            terminations=terminations,
            department=department,
            _configuration=_configuration,
            **kwargs,
        )

from oyster_python_sdk.model.engagement_benefit_enrollments import EngagementBenefitEnrollments
from oyster_python_sdk.model.engagement_department import EngagementDepartment
from oyster_python_sdk.model.engagement_personal_details import EngagementPersonalDetails
from oyster_python_sdk.model.engagement_terminations import EngagementTerminations
