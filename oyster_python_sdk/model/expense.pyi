# coding: utf-8

"""
    Endpoints

    Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oyster_python_sdk import schemas  # noqa: F401


class Expense(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "receiptAmount",
            "amount",
            "expenseId",
            "name",
            "category",
        }
        
        class properties:
            expenseId = schemas.StrSchema
            name = schemas.StrSchema
            amount = schemas.DictSchema
            
            
            class category(
                schemas.StrSchema
            ):
                pass
            receiptAmount = schemas.DictSchema
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            incurredOn = schemas.DateSchema
            submittedAt = schemas.DateTimeSchema
            reviewState = schemas.StrSchema
            
            
            class reviewedAt(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reviewedAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class receiptUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'receiptUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def engagement() -> typing.Type['ExpenseEngagement']:
                return ExpenseEngagement
            source = schemas.StrSchema
            __annotations__ = {
                "expenseId": expenseId,
                "name": name,
                "amount": amount,
                "category": category,
                "receiptAmount": receiptAmount,
                "description": description,
                "incurredOn": incurredOn,
                "submittedAt": submittedAt,
                "reviewState": reviewState,
                "reviewedAt": reviewedAt,
                "receiptUrl": receiptUrl,
                "engagement": engagement,
                "source": source,
            }
    
    receiptAmount: MetaOapg.properties.receiptAmount
    amount: MetaOapg.properties.amount
    expenseId: MetaOapg.properties.expenseId
    name: MetaOapg.properties.name
    category: MetaOapg.properties.category
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseId"]) -> MetaOapg.properties.expenseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptAmount"]) -> MetaOapg.properties.receiptAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incurredOn"]) -> MetaOapg.properties.incurredOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submittedAt"]) -> MetaOapg.properties.submittedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewState"]) -> MetaOapg.properties.reviewState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewedAt"]) -> MetaOapg.properties.reviewedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptUrl"]) -> MetaOapg.properties.receiptUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement"]) -> 'ExpenseEngagement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expenseId", "name", "amount", "category", "receiptAmount", "description", "incurredOn", "submittedAt", "reviewState", "reviewedAt", "receiptUrl", "engagement", "source", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseId"]) -> MetaOapg.properties.expenseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptAmount"]) -> MetaOapg.properties.receiptAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incurredOn"]) -> typing.Union[MetaOapg.properties.incurredOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submittedAt"]) -> typing.Union[MetaOapg.properties.submittedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewState"]) -> typing.Union[MetaOapg.properties.reviewState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewedAt"]) -> typing.Union[MetaOapg.properties.reviewedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptUrl"]) -> typing.Union[MetaOapg.properties.receiptUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement"]) -> typing.Union['ExpenseEngagement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expenseId", "name", "amount", "category", "receiptAmount", "description", "incurredOn", "submittedAt", "reviewState", "reviewedAt", "receiptUrl", "engagement", "source", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        receiptAmount: typing.Union[MetaOapg.properties.receiptAmount, dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, ],
        expenseId: typing.Union[MetaOapg.properties.expenseId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        incurredOn: typing.Union[MetaOapg.properties.incurredOn, str, date, schemas.Unset] = schemas.unset,
        submittedAt: typing.Union[MetaOapg.properties.submittedAt, str, datetime, schemas.Unset] = schemas.unset,
        reviewState: typing.Union[MetaOapg.properties.reviewState, str, schemas.Unset] = schemas.unset,
        reviewedAt: typing.Union[MetaOapg.properties.reviewedAt, None, str, datetime, schemas.Unset] = schemas.unset,
        receiptUrl: typing.Union[MetaOapg.properties.receiptUrl, None, str, schemas.Unset] = schemas.unset,
        engagement: typing.Union['ExpenseEngagement', schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Expense':
        return super().__new__(
            cls,
            *args,
            receiptAmount=receiptAmount,
            amount=amount,
            expenseId=expenseId,
            name=name,
            category=category,
            description=description,
            incurredOn=incurredOn,
            submittedAt=submittedAt,
            reviewState=reviewState,
            reviewedAt=reviewedAt,
            receiptUrl=receiptUrl,
            engagement=engagement,
            source=source,
            _configuration=_configuration,
            **kwargs,
        )

from oyster_python_sdk.model.expense_engagement import ExpenseEngagement
