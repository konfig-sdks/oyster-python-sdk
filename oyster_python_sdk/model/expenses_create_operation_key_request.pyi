# coding: utf-8

"""
    Endpoints

    Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from oyster_python_sdk import schemas  # noqa: F401


class ExpensesCreateOperationKeyRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "receiptAmount",
            "incurredOn",
            "name",
            "category",
            "receiptUrl",
            "engagementId",
        }
        
        class properties:
            
            
            class engagementId(
                schemas.StrSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class incurredOn(
                schemas.DateSchema
            ):
                pass
            
            
            class category(
                schemas.StrSchema
            ):
                pass
            
            
            class receiptUrl(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def receiptAmount() -> typing.Type['ExpensesCreateOperationKeyRequestReceiptAmount']:
                return ExpensesCreateOperationKeyRequestReceiptAmount
            description = schemas.StrSchema
            __annotations__ = {
                "engagementId": engagementId,
                "name": name,
                "incurredOn": incurredOn,
                "category": category,
                "receiptUrl": receiptUrl,
                "receiptAmount": receiptAmount,
                "description": description,
            }
    
    receiptAmount: 'ExpensesCreateOperationKeyRequestReceiptAmount'
    incurredOn: MetaOapg.properties.incurredOn
    name: MetaOapg.properties.name
    category: MetaOapg.properties.category
    receiptUrl: MetaOapg.properties.receiptUrl
    engagementId: MetaOapg.properties.engagementId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagementId"]) -> MetaOapg.properties.engagementId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incurredOn"]) -> MetaOapg.properties.incurredOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptUrl"]) -> MetaOapg.properties.receiptUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptAmount"]) -> 'ExpensesCreateOperationKeyRequestReceiptAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["engagementId", "name", "incurredOn", "category", "receiptUrl", "receiptAmount", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagementId"]) -> MetaOapg.properties.engagementId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incurredOn"]) -> MetaOapg.properties.incurredOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptUrl"]) -> MetaOapg.properties.receiptUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptAmount"]) -> 'ExpensesCreateOperationKeyRequestReceiptAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["engagementId", "name", "incurredOn", "category", "receiptUrl", "receiptAmount", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        receiptAmount: 'ExpensesCreateOperationKeyRequestReceiptAmount',
        incurredOn: typing.Union[MetaOapg.properties.incurredOn, str, date, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        receiptUrl: typing.Union[MetaOapg.properties.receiptUrl, str, ],
        engagementId: typing.Union[MetaOapg.properties.engagementId, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpensesCreateOperationKeyRequest':
        return super().__new__(
            cls,
            *args,
            receiptAmount=receiptAmount,
            incurredOn=incurredOn,
            name=name,
            category=category,
            receiptUrl=receiptUrl,
            engagementId=engagementId,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from oyster_python_sdk.model.expenses_create_operation_key_request_receipt_amount import ExpensesCreateOperationKeyRequestReceiptAmount
